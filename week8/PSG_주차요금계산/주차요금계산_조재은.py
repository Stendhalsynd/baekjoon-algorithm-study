import math

'''
[조건]
- 어떤 차량이 입차된 후에 출차된 내역이 없다면, 23:59에 출차된 것으로 간주
- 00:00 부터 23:59까지의 입/출차 내역을 바탕으로 차량별 누적 주차 시간을 계산하여 요금을 일괄로 정산
- 누적 주차 시간이 기본 시간 '이하' 라면, 기본 요금을 청구
- 기본 시간을 '초과'하면, 초과한 시간에 대해서 단위 시간마다 단위 요금을 청구
 1. 단위 시간으로 나누어 떨어지지 않으면 "올림"
 2. [a] : a 보다 작지 않은 최소의 정수를 의미. 즉, "올림"을 의미
- 차량 번호가 작은 자동차부터 청구할 주차 요금을 차례대로 정수 배열에 담아서 return

[매개 변수]
fees[0] ~ [3]: 주차 요금, 정수 배열
- 기본 시간(분)  기본 요금(원)    단위 시간(분)    단위 요금(원)
    180         5000            10              600
records[0] ~ [2]: 입/출차 내역, 문자열 배열 
- 시각(시:분) 차량 번호 내역
    05:34     5961   입차

'''
# 기본시간(분), 기본요금(원), 단위시간(분), 단위요금(원)
fees = [180, 5000, 10, 600]
# 시각(시:분) 차량번호 입/출차 내역
records = ["05:34 5961 IN", "06:00 0000 IN", "06:34 0000 OUT", "07:59 5961 OUT", "07:59 0148 IN"
            , "18:59 0000 IN", "19:09 0148 OUT", "22:59 5961 IN", "23:00 5961 OUT"]

def solution(fees, records):
    answer = []
    dic = {}                    # 차량 번호별 입출시각 딕셔너리
    last_time = 23 * 60 + 59    # 23:59 = 1439

    for i in records:
        time, car, history = i.split()      # 공백으로 split
        h, m = time.split(':')              # 콜론으로 split
        time = int(h) * 60 + int(m)         # time = 3h * 60 + m분

        if history == 'IN':             # 입차된 내역이 있다면
            if car not in dic:          # 차량번호가 dic에 없는 경우
                dic[car] = [time, 0]    # dic에 입차 시간(time)과 누적 주차 시간 0을 초기화
            else:                       # 차량 번호가 dic에 있는 경우, 이전에 입차한 내역이 있음 => 입차 시간을 업데이트하고, 누적 주차시간 dic[car][1]은 변경하지 않습니다.
                dic[car] = [time, dic[car][1]]
        else:                           # 출차 내역이 있다면
            dic[car] = [-1, dic[car][1] + time - dic[car][0]]
                                        # dic[car][i]은 해당 차량의 누적 주차 시간/time은 현재 처리 중인 기록의 시간/dic[car][0]은 해당 차량의 입차시간
                                        # 따라서, time - dic[car][0]은 차량의 주차 시간을 계산하고 이 값을
                                        # dic[car][1]에 더해주어 누적 주차 시간을 업데이트함
                                        # 그리고 '-1'을 'dic[car]'의 첫 번째 요소로 설정하여 나중에 해당 차량의 주차 요금을 계산할 때 'OUT' 여부를 확인할 수 있도록함

    cars = sorted(dic.keys()) # 차 번호 정렬

    for i in cars:
        mm = dic[i][1]  # 현재 차량 'i'의 누적 주차 시간을 'mm' 변수에 저장
                        # dic[i][i]은 해당 차량의 누적 주차 시간을 나타냄

        if dic[i][0] >= 0: # 해당 차량의 입차 내역이 있는 경우
            mm = mm + last_time - dic[i][0] # 주차장을 빠져나간 시간('last_time')을 활용하여, 주차 시간을 보정. 이렇게 보정된 주차 시간은 기본 시간을 초과한 부분을 나타냄
        answer.append(fees[1] + math.ceil(max(0, mm - fees[0]) / fees[2]) * fees[3])
                        # fees[1] : 기본요금
                        # max(0, mm - fees[0]) b: 주차 시간이 기본 시간을 초과한 경우, 초과한 시간을 계산하고 그렇지 않은 경우 0을 반환
                        # math.ceil(...) : 초과한 시간을 단위 시간으로 나누고 올림한 값을 계산
                        # fees[3] : 단위 요금
                        # 따라서, 주차 요금은 기본 요금에 초과 주차 시간을 단위 시간으로 나눈 값을 올림하여 단위 요금을 곱한 값이다.

    return print(answer)

solution(fees, records)